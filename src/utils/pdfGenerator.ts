import { jsPDF } from "jspdf";
import html2canvas from "html2canvas";
import { DetailedFormData } from "@/types/analysis";

interface GenerateReportParams {
  formData: DetailedFormData;
  analysis: {
    industry: string;
    department: string;
    bot_function: string;
    savings: number;
    profit_increase: number;
    explanation: string;
    marketing_strategy: string;
    allAnalyses?: any[];
  };
}

export const generateAnalysisReport = async ({ formData, analysis }: GenerateReportParams): Promise<jsPDF> => {
  const reportContainer = document.createElement('div');
  reportContainer.style.width = '800px';
  reportContainer.style.padding = '40px';
  reportContainer.style.background = 'white';
  document.body.appendChild(reportContainer);

  reportContainer.innerHTML = `
    <div style="font-family: Arial, sans-serif;">
      <div style="display: flex; align-items: center; margin-bottom: 30px;">
        <img src="/lovable-uploads/1b6619ed-f854-4bba-87ff-33cca6d20e9a.png" alt="ChatSites Logo" style="height: 64px;" />
      </div>
      
      <div style="margin-bottom: 20px;">
        <h2 style="color: #333; font-size: 24px; margin-bottom: 10px;">AI Implementation Analysis Report</h2>
        <p style="color: #666; font-size: 16px;">Industry: ${analysis.industry}</p>
      </div>

      ${analysis.allAnalyses?.map(item => `
        <div style="background: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 20px; margin-bottom: 20px;">
          <h3 style="font-size: 20px; font-weight: bold; color: #333; margin: 0 0 15px 0;">${item.department}</h3>
          
          <div style="margin-bottom: 15px;">
            <div style="background: #f65228; color: white; padding: 4px 8px; border-radius: 4px; font-size: 14px; display: inline-block; margin-bottom: 8px;">
              Function
            </div>
            <p style="color: #666; font-size: 14px; margin: 0;">${item.function}</p>
          </div>
          
          <div style="margin-bottom: 15px;">
            <div style="background: #f65228; color: white; padding: 4px 8px; border-radius: 4px; font-size: 14px; display: inline-block; margin-bottom: 8px;">
              Explanation
            </div>
            <p style="color: #666; font-size: 14px; margin: 0;">${item.explanation}</p>
          </div>
          
          <div style="margin-bottom: 15px;">
            <div style="background: #f65228; color: white; padding: 4px 8px; border-radius: 4px; font-size: 14px; display: inline-block; margin-bottom: 8px;">
              Marketing Strategy
            </div>
            <p style="color: #666; font-size: 14px; margin: 0;">${item.marketingStrategy}</p>
          </div>

          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
            <div style="display: flex; align-items: center; gap: 8px;">
              <span style="color: #10B981;">$</span>
              <span style="font-size: 14px; font-weight: 500;">Savings: $${item.savings}</span>
            </div>
            <div style="display: flex; align-items: center; gap: 8px;">
              <span style="color: #10B981;">â†—</span>
              <span style="font-size: 14px; font-weight: 500;">Profit: ${item.profit_increase}%</span>
            </div>
          </div>
        </div>
      `).join('')}

      <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e2e8f0;">
        <p style="color: #666; font-size: 14px; margin: 0;">Generated by ChatSites AI Analysis Tool</p>
        <p style="color: #666; font-size: 14px; margin: 5px 0 0;">www.chatsites.ai</p>
      </div>
    </div>
  `;

  try {
    const canvas = await html2canvas(reportContainer, {
      scale: 2,
      logging: false,
      useCORS: true,
      backgroundColor: '#ffffff'
    });

    document.body.removeChild(reportContainer);

    const imgWidth = 210; // A4 width in mm
    const pageHeight = 297; // A4 height in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    const pdf = new jsPDF('p', 'mm', 'a4');
    
    let heightLeft = imgHeight;
    let position = 0;

    // First page
    pdf.addImage(
      canvas.toDataURL('image/png'),
      'PNG',
      0,
      position,
      imgWidth,
      imgHeight,
      '',
      'FAST'
    );

    heightLeft -= pageHeight;

    // Add subsequent pages if needed
    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(
        canvas.toDataURL('image/png'),
        'PNG',
        0,
        position,
        imgWidth,
        imgHeight,
        '',
        'FAST'
      );
      heightLeft -= pageHeight;
    }

    return pdf;
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};