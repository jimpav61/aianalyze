import { jsPDF } from "jspdf";
import html2canvas from "html2canvas";
import { DetailedFormData } from "@/types/analysis";

interface GenerateReportParams {
  formData: DetailedFormData;
  analysis: {
    industry: string;
    department: string;
    bot_function: string;
    savings: number;
    profit_increase: number;
    explanation: string;
    marketing_strategy: string;
    allAnalyses?: any[];
  };
}

export const generateAnalysisReport = async ({ formData, analysis }: GenerateReportParams): Promise<jsPDF> => {
  // Create a temporary container to render the report
  const reportContainer = document.createElement('div');
  reportContainer.style.padding = '20px';
  reportContainer.style.background = 'white';
  
  // Create the report content matching the exact card layout
  reportContainer.innerHTML = `
    <div style="font-family: Arial, sans-serif;">
      <div style="display: flex; align-items: center; margin-bottom: 20px;">
        <div style="color: #f65228; font-size: 24px; font-weight: bold;">ChatSites Analysis Report</div>
      </div>
      
      <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
        <h2 style="color: #333; font-size: 18px; margin-bottom: 15px;">Company Information</h2>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px;">
          <div>
            <p style="font-weight: bold; margin: 5px 0;">Company Name:</p>
            <p style="color: #666;">${formData.companyName}</p>
          </div>
          <div>
            <p style="font-weight: bold; margin: 5px 0;">Industry:</p>
            <p style="color: #666;">${analysis.industry}</p>
          </div>
          <div>
            <p style="font-weight: bold; margin: 5px 0;">Contact Email:</p>
            <p style="color: #666;">${formData.email}</p>
          </div>
          <div>
            <p style="font-weight: bold; margin: 5px 0;">Contact Phone:</p>
            <p style="color: #666;">${formData.phoneNumber}</p>
          </div>
        </div>
      </div>

      <div style="display: grid; gap: 20px;">
        ${(analysis.allAnalyses || [analysis]).map(item => `
          <div style="border: 1px solid #e2e8f0; border-radius: 8px; padding: 16px; background: white;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
              <h3 style="font-size: 20px; font-weight: bold; color: #333;">${item.department}</h3>
            </div>
            
            <div style="margin-bottom: 16px;">
              <div style="background: #f65228; color: white; display: inline-block; padding: 4px 8px; border-radius: 4px; font-size: 14px; margin-bottom: 8px;">
                Function
              </div>
              <p style="color: #666; font-size: 14px;">${item.function || item.bot_function}</p>
            </div>
            
            <div style="margin-bottom: 16px;">
              <div style="background: #f65228; color: white; display: inline-block; padding: 4px 8px; border-radius: 4px; font-size: 14px; margin-bottom: 8px;">
                Explanation
              </div>
              <p style="color: #666; font-size: 14px;">${item.explanation}</p>
            </div>
            
            <div style="margin-bottom: 16px;">
              <div style="background: #f65228; color: white; display: inline-block; padding: 4px 8px; border-radius: 4px; font-size: 14px; margin-bottom: 8px;">
                Marketing Strategy
              </div>
              <p style="color: #666; font-size: 14px;">${item.marketingStrategy || item.marketing_strategy}</p>
            </div>

            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px;">
              <div style="display: flex; align-items: center; gap: 8px;">
                <span style="color: #10B981;">$</span>
                <span style="font-size: 14px; font-weight: 500;">Savings: $${typeof item.savings === 'string' ? item.savings : item.savings.toLocaleString()}</span>
              </div>
              <div style="display: flex; align-items: center; gap: 8px;">
                <span style="color: #10B981;">â†—</span>
                <span style="font-size: 14px; font-weight: 500;">Profit: ${typeof item.profit_increase === 'string' ? item.profit_increase : item.profit_increase}%</span>
              </div>
            </div>
          </div>
        `).join('')}
      </div>

      <div style="margin-top: 20px; text-align: center; color: #666; font-size: 12px;">
        <p>Generated by ChatSites AI Analysis Tool</p>
        <p>www.chatsites.ai</p>
      </div>
    </div>
  `;

  document.body.appendChild(reportContainer);

  try {
    // Capture the rendered content as an image
    const canvas = await html2canvas(reportContainer, {
      scale: 2, // Higher resolution
      logging: false,
      useCORS: true,
      backgroundColor: '#ffffff'
    });

    // Remove the temporary container
    document.body.removeChild(reportContainer);

    // Create PDF with the correct dimensions
    const imgWidth = 210; // A4 width in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    const pdf = new jsPDF('p', 'mm', 'a4');
    
    // Add the image to the PDF
    pdf.addImage(
      canvas.toDataURL('image/png'),
      'PNG',
      0,
      0,
      imgWidth,
      imgHeight
    );

    // If content spans multiple pages, add them
    if (imgHeight > 297) { // A4 height in mm
      let heightLeft = imgHeight - 297;
      let position = -297;
      
      while (heightLeft > 0) {
        pdf.addPage();
        pdf.addImage(
          canvas.toDataURL('image/png'),
          'PNG',
          0,
          position,
          imgWidth,
          imgHeight
        );
        heightLeft -= 297;
        position -= 297;
      }
    }

    return pdf;
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw error;
  }
};