import { jsPDF } from "jspdf";
import { DetailedFormData } from "@/types/analysis";

interface GenerateReportParams {
  formData: DetailedFormData;
  analysis: {
    industry: string;
    department: string;
    bot_function: string;
    savings: number;
    profit_increase: number;
    explanation: string;
    marketing_strategy: string;
    allAnalyses?: any[];
  };
}

export const generateAnalysisReport = async ({ formData, analysis }: GenerateReportParams): Promise<jsPDF> => {
  console.log('PDF Generation - Starting with data:', { formData, analysis });
  
  try {
    const doc = new jsPDF();
    
    // Logo and Title
    doc.addImage("/lovable-uploads/23135d22-4ba2-4f66-a179-9bd803c29569.png", "PNG", 20, 15, 30, 30);
    doc.setFontSize(24);
    doc.setTextColor(26, 31, 44); // #1A1F2C
    doc.text("ChatSites AI Analysis Report", 60, 35);
    
    // Company Information
    doc.setFontSize(16);
    doc.setTextColor(64, 62, 67); // #403E43
    doc.text("Company Information", 20, 60);
    doc.setFontSize(12);
    doc.text(`Company: ${formData.companyName}`, 20, 75);
    doc.text(`Industry: ${analysis.industry}`, 20, 85);
    doc.text(`Contact Email: ${formData.email}`, 20, 95);
    doc.text(`Phone: ${formData.phoneNumber || 'N/A'}`, 20, 105);
    doc.text(`Employees: ${formData.employees}`, 20, 115);
    doc.text(`Annual Revenue: ${formData.revenue}`, 20, 125);

    // Current Operations
    doc.setFontSize(16);
    doc.text("Current Operations", 20, 145);
    doc.setFontSize(12);
    doc.text(`Service Channels: ${formData.serviceChannels}`, 20, 160);
    doc.text(`Monthly Interactions: ${formData.monthlyInteractions}`, 20, 170);
    doc.text(`Current Tools: ${formData.currentTools}`, 20, 180);
    doc.text(`Pain Points: ${formData.painPoints}`, 20, 190);

    // Primary Analysis
    doc.setFontSize(16);
    doc.text("Primary Analysis", 20, 210);
    doc.setFontSize(12);
    doc.text(`Department: ${analysis.department}`, 20, 225);
    doc.text(`Function: ${analysis.bot_function}`, 20, 235);
    
    // Financial Projections with green color
    doc.setTextColor(22, 163, 74); // text-green-600
    doc.text(`Projected Annual Savings: $${analysis.savings.toLocaleString()}`, 20, 245);
    doc.text(`Projected Profit Increase: ${analysis.profit_increase}%`, 20, 255);

    // Add new page for implementation details
    doc.addPage();
    doc.setTextColor(64, 62, 67);
    doc.setFontSize(16);
    doc.text("Implementation Details", 20, 20);
    doc.setFontSize(12);
    
    // Split long text into multiple lines
    const splitExplanation = doc.splitTextToSize(analysis.explanation, 170);
    doc.text(splitExplanation, 20, 35);
    
    const splitStrategy = doc.splitTextToSize(analysis.marketing_strategy, 170);
    doc.text(splitStrategy, 20, doc.getTextDimensions(splitExplanation).h + 45);

    // Additional Analyses if available
    if (analysis.allAnalyses && analysis.allAnalyses.length > 1) {
      doc.addPage();
      doc.setFontSize(16);
      doc.text("Additional Department Analyses", 20, 20);
      
      let yPos = 40;
      analysis.allAnalyses.slice(1).forEach((additionalAnalysis: any) => {
        if (yPos > 250) {
          doc.addPage();
          yPos = 20;
        }
        
        doc.setFontSize(14);
        doc.setTextColor(64, 62, 67);
        doc.text(`${additionalAnalysis.department}`, 20, yPos);
        doc.setFontSize(12);
        doc.text(`Function: ${additionalAnalysis.function}`, 20, yPos + 10);
        
        // Financial metrics in green
        doc.setTextColor(22, 163, 74);
        doc.text(`Savings: $${Number(additionalAnalysis.savings).toLocaleString()}`, 20, yPos + 20);
        doc.text(`Profit Increase: ${additionalAnalysis.profit_increase}%`, 20, yPos + 30);
        
        yPos += 50;
      });
    }

    // Footer on last page
    doc.setTextColor(64, 62, 67);
    doc.setFontSize(10);
    doc.text("Generated by ChatSites AI Analysis Tool", 20, 280);
    doc.text("www.chatsites.ai", 20, 287);

    console.log('PDF Generation - PDF created successfully');
    return doc;
  } catch (error) {
    console.error('PDF Generation - Error:', error);
    throw error;
  }
};