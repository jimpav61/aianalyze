import { Button } from "@/components/ui/button";
import { Download } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { jsPDF } from "jspdf";

interface DownloadReportButtonProps {
  reportRef: React.RefObject<HTMLDivElement>;
}

export const DownloadReportButton = ({ reportRef }: DownloadReportButtonProps) => {
  const { toast } = useToast();

  const handleDownload = async () => {
    if (!reportRef?.current) {
      toast({
        title: "Error",
        description: "Could not generate report. Please try again.",
        variant: "destructive",
      });
      return;
    }

    try {
      const doc = new jsPDF();
      
      // Extract report data from the ref
      const companyInfo = reportRef.current.querySelector('.company-info');
      const currentOps = reportRef.current.querySelector('.current-operations');
      const analysisResults = reportRef.current.querySelector('.analysis-results');
      const implementationPlan = reportRef.current.querySelector('.implementation-plan');

      // Set up PDF styling
      doc.setFont("helvetica");
      
      // Add header
      doc.setFontSize(24);
      doc.setTextColor(246, 82, 40); // #f65228
      doc.text("ChatSites AI Analysis Report", 20, 30);
      
      let yPosition = 50;

      // Add company information section
      if (companyInfo) {
        const companyData = companyInfo.querySelectorAll('.text-gray-600');
        doc.setFontSize(18);
        doc.setTextColor(0);
        doc.text("Company Information", 20, yPosition);
        yPosition += 10;
        doc.setFontSize(12);
        companyData.forEach((data) => {
          const text = data.textContent || '';
          if (text && yPosition < 270) {
            doc.text(text, 20, yPosition);
            yPosition += 8;
          }
        });
        yPosition += 10;
      }

      // Add current operations section
      if (currentOps) {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 30;
        }
        const opsData = currentOps.querySelectorAll('.text-gray-600');
        doc.setFontSize(18);
        doc.text("Current Operations", 20, yPosition);
        yPosition += 10;
        doc.setFontSize(12);
        opsData.forEach((data) => {
          const text = data.textContent || '';
          if (text && yPosition < 270) {
            doc.text(text, 20, yPosition);
            yPosition += 8;
          }
        });
        yPosition += 10;
      }

      // Add analysis results section
      if (analysisResults) {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 30;
        }
        const resultsData = analysisResults.querySelectorAll('.text-gray-600');
        doc.setFontSize(18);
        doc.text("Analysis Results", 20, yPosition);
        yPosition += 10;
        doc.setFontSize(12);
        resultsData.forEach((data) => {
          const text = data.textContent || '';
          if (text && yPosition < 270) {
            const lines = doc.splitTextToSize(text, 170);
            doc.text(lines, 20, yPosition);
            yPosition += lines.length * 8 + 4;
          }
        });
        yPosition += 10;
      }

      // Add implementation plan section
      if (implementationPlan) {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 30;
        }
        const planData = implementationPlan.querySelectorAll('.text-gray-600');
        doc.setFontSize(18);
        doc.text("Implementation Plan", 20, yPosition);
        yPosition += 10;
        doc.setFontSize(12);
        planData.forEach((data) => {
          const text = data.textContent || '';
          if (text && yPosition < 270) {
            const lines = doc.splitTextToSize(text, 170);
            doc.text(lines, 20, yPosition);
            yPosition += lines.length * 8 + 4;
          }
        });
      }

      // Add footer to each page
      const pageCount = doc.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.setTextColor(128);
        doc.text(
          `Generated by ChatSites AI - Page ${i} of ${pageCount}`,
          20,
          doc.internal.pageSize.height - 10
        );
      }

      // Save the PDF
      doc.save("chatsites-analysis-report.pdf");
      
      toast({
        title: "Success",
        description: "Report downloaded successfully!",
      });
    } catch (error) {
      console.error("Download error:", error);
      toast({
        title: "Error",
        description: "Failed to download report. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <Button
      onClick={handleDownload}
      variant="outline"
      className="flex items-center gap-2"
    >
      <Download className="h-4 w-4" />
      Download PDF
    </Button>
  );
};