import { Button } from "@/components/ui/button";
import { Download } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { jsPDF } from "jspdf";

interface DownloadReportButtonProps {
  reportRef: React.RefObject<HTMLDivElement>;
}

export const DownloadReportButton = ({ reportRef }: DownloadReportButtonProps) => {
  const { toast } = useToast();

  const handleDownload = async () => {
    console.log("DownloadReportButton - Starting download");
    if (!reportRef?.current) {
      console.error("DownloadReportButton - No report ref found");
      toast({
        title: "Error",
        description: "Could not generate report. Please try again.",
        variant: "destructive",
      });
      return;
    }

    try {
      const doc = new jsPDF();
      const report = reportRef.current;

      // Extract text content from each section
      const companyInfo = report.querySelector('.company-info');
      const currentOps = report.querySelector('.current-operations');
      const analysisResults = report.querySelector('.analysis-results');
      const implementationPlan = report.querySelector('.implementation-plan');

      // Set up PDF styling
      doc.setFont("helvetica");
      doc.setFontSize(20);
      doc.text("ChatSites AI Analysis Report", 20, 20);
      
      doc.setFontSize(12);
      let yPosition = 40;

      // Add company information
      if (companyInfo) {
        doc.setFontSize(16);
        doc.text("Company Information", 20, yPosition);
        yPosition += 10;
        doc.setFontSize(12);
        const companyText = companyInfo.textContent || '';
        const companyLines = doc.splitTextToSize(companyText, 170);
        doc.text(companyLines, 20, yPosition);
        yPosition += companyLines.length * 7 + 10;
      }

      // Add current operations
      if (currentOps) {
        doc.setFontSize(16);
        doc.text("Current Operations", 20, yPosition);
        yPosition += 10;
        doc.setFontSize(12);
        const opsText = currentOps.textContent || '';
        const opsLines = doc.splitTextToSize(opsText, 170);
        doc.text(opsLines, 20, yPosition);
        yPosition += opsLines.length * 7 + 10;
      }

      // Add analysis results
      if (analysisResults) {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 20;
        }
        doc.setFontSize(16);
        doc.text("Analysis Results", 20, yPosition);
        yPosition += 10;
        doc.setFontSize(12);
        const analysisText = analysisResults.textContent || '';
        const analysisLines = doc.splitTextToSize(analysisText, 170);
        doc.text(analysisLines, 20, yPosition);
        yPosition += analysisLines.length * 7 + 10;
      }

      // Add implementation plan
      if (implementationPlan) {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 20;
        }
        doc.setFontSize(16);
        doc.text("Implementation Plan", 20, yPosition);
        yPosition += 10;
        doc.setFontSize(12);
        const planText = implementationPlan.textContent || '';
        const planLines = doc.splitTextToSize(planText, 170);
        doc.text(planLines, 20, yPosition);
      }

      // Add footer
      doc.setFontSize(10);
      const pageCount = doc.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.text(
          `Generated by ChatSites AI - Page ${i} of ${pageCount}`,
          20,
          doc.internal.pageSize.height - 10
        );
      }

      // Save the PDF
      doc.save("chatsites-analysis-report.pdf");
      
      console.log("DownloadReportButton - Download completed successfully");
      toast({
        title: "Success",
        description: "Report downloaded successfully!",
      });
    } catch (error) {
      console.error("DownloadReportButton - Download error:", error);
      toast({
        title: "Error",
        description: "Failed to download report. Please try again.",
        variant: "destructive",
      });
    }
  };

  return (
    <Button
      onClick={handleDownload}
      variant="outline"
      className="flex items-center gap-2"
    >
      <Download className="h-4 w-4" />
      Download PDF
    </Button>
  );
};